import path from "path";
import { existsSync, mkdirSync } from "fs"; // Импортируем sync-методы из fs
import fs from "fs"; // Импортируем основной модуль fs для createWriteStream
import Busboy from "busboy";
import { Readable } from "stream";

export const config = {
  api: {
    bodyParser: false, // Отключаем парсинг тела запроса
  },
};

export async function POST(req) {
  console.log("Request received");
  console.log("Request headers:", req.headers);

  // Правильно получаем заголовок Content-Type через req.headers.get()
  const contentType = req.headers.get("content-type");

  if (!contentType || !contentType.includes("multipart/form-data")) {
    return new Response(
      JSON.stringify({ error: "Missing or invalid Content-Type header" }),
      {
        status: 400,
        headers: { "Content-Type": "application/json" },
      }
    );
  }

  const bb = Busboy({ headers: { "content-type": contentType } });
  let type, slug;
  const filePaths = [];
  const filePromises = [];

  const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 MB

  return new Promise((resolve, reject) => {
    const timeout = setTimeout(() => {
      console.error("Request timed out");
      reject(
        new Response(JSON.stringify({ error: "Request timed out" }), {
          status: 408,
          headers: { "Content-Type": "application/json" },
        })
      );
    }, 30000); // Таймаут 30 секунд

    bb.on("field", (name, val) => {
      console.log(`Field [${name}]: value: ${val}`);
      if (name === "type") {
        type = val;
      } else if (name === "slug") {
        slug = val;
      }
    });

    bb.on("file", (name, file, info) => {
      const { filename, mimeType } = info;
      console.log(`File [${filename}] detected with MIME type: ${mimeType}`);

      if (!filename) {
        return reject(new Error("No file uploaded"));
      }

      const uploadDir = path.join(
        process.cwd(),
        "public",
        "uploads",
        type,
        slug
      );
      if (!existsSync(uploadDir)) {
        mkdirSync(uploadDir, { recursive: true });
      }

      const filePath = path.join(uploadDir, filename);
      const writeStream = fs.createWriteStream(filePath);

      let fileSize = 0;

      file.on("data", (chunk) => {
        fileSize += chunk.length;

        if (fileSize > MAX_FILE_SIZE) {
          console.error(
            `File [${filename}] exceeds maximum size of ${
              MAX_FILE_SIZE / 1024 / 1024
            } MB`
          );
          file.unpipe(); // Прекращаем передачу данных
          writeStream.close(); // Закрываем поток записи
          return reject(new Error("File exceeds maximum size"));
        }
      });

      file.pipe(writeStream);

      filePromises.push(
        new Promise((res, rej) => {
          writeStream.on("finish", () => {
            console.log(`File [${filename}] saved successfully`);
            filePaths.push(`/uploads/${type}/${slug}/${filename}`);
            res();
          });
          writeStream.on("error", (err) => {
            console.error(`Error writing file [${filename}]:`, err.message);
            rej(err);
          });
          writeStream.on("close", () => {
            console.log(`File [${filename}] stream closed`);
          });
        })
      );
    });

    bb.on("close", async () => {
      clearTimeout(timeout); // Очищаем таймаут при успешном завершении
      try {
        await Promise.all(filePromises);
        resolve(
          new Response(
            JSON.stringify({
              message: "Files uploaded successfully",
              filePaths,
            }),
            {
              status: 200,
              headers: { "Content-Type": "application/json" },
            }
          )
        );
      } catch (err) {
        console.error("Ошибка обработки файлов:", err.message);
        reject(
          new Response(JSON.stringify({ error: "Ошибка обработки файлов" }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
          })
        );
      }
    });

    bb.on("error", (err) => {
      console.error("Ошибка Busboy:", err.message);
      reject(
        new Response(JSON.stringify({ error: "Ошибка Busboy" }), {
          status: 500,
          headers: { "Content-Type": "application/json" },
        })
      );
    });

    // Преобразование ReadableStream в поток Node.js и передача его в Busboy
    const webStreamToNodeStream = (webStream) => {
      const reader = webStream.getReader();
      const stream = new Readable();

      stream._read = () => {}; // No-op

      const pushChunk = async ({ done, value }) => {
        if (done) {
          stream.push(null); // Конец потока
        } else {
          stream.push(value); // Передаем чанк в поток
        }
      };

      const readChunks = async () => {
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            pushChunk({ done, value });
          }
          stream.push(null); // Завершаем поток
        } catch (err) {
          stream.destroy(err); // Обработка ошибок
        }
      };

      readChunks(); // Начинаем чтение чанков

      return stream;
    };

    const nodeStream = webStreamToNodeStream(req.body);
    nodeStream.pipe(bb);
  });
}


import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Check, ChevronsUpDown } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "../ui/textarea";
import { Switch } from "../ui/switch";
import ImageUploadForm from "./ImageUploadForm";

interface Feature {
  label: string;
  value: string | number | boolean;
  type: "string" | "int" | "bool";
}

interface Category {
  _id: string;
  name_ru: string;
}

interface EditProductFormProps {
  product: any;
  categories: Category[];
  onSave: (updatedProduct: any) => void;
  onCancel: () => void;
}

export const EditProductForm: React.FC<EditProductFormProps> = ({
  product,
  categories,
  onSave,
  onCancel,
}) => {
  const [formData, setFormData] = useState({
    _id: product._id || "",
    category_id:
      typeof product.category === "object"
        ? product.category?._id || ""
        : product.category_id || "",
    slug: product.slug || "",
    name: product.name || "",
    price: product.price,
    short_description: product.short_description || "",
    description: product.description || "",
    features: Array.isArray(product.features)
      ? product.features
      : Object.entries(product.features || {}).map(([key, value]) => ({
          label: key,
          value: value,
          type:
            typeof value === "boolean"
              ? "bool"
              : typeof value === "number"
              ? "int"
              : "string",
        })),
    images: Array.isArray(product.images) ? product.images : [],
    stock_quantity: product.stock_quantity || 0,
    isDiscount: product.isDiscount || false,
    discountedPrice: product.discountedPrice || 0,
    isHotHit: product.isHotHit || false,
  });

  const [openCategory, setOpenCategory] = useState(false);

  const handleFeatureChange = (index: number, field: string, value: any) => {
    const updatedFeatures = [...formData.features];
    updatedFeatures[index][field as keyof Feature] = value;
    setFormData({ ...formData, features: updatedFeatures });
  };

  const addFeature = () => {
    setFormData({
      ...formData,
      features: [
        ...formData.features,
        { label: "", value: "", type: "string" },
      ],
    });
  };

  const removeFeature = (index: number) => {
    const updatedFeatures = formData.features.filter((_, i) => i !== index);
    setFormData({ ...formData, features: updatedFeatures });
  };

  const handleImageChange = (index: number, value: string) => {
    const updatedImages = [...formData.images];
    updatedImages[index] = value;
    setFormData({ ...formData, images: updatedImages });
  };

  const addImage = () => {
    setFormData({
      ...formData,
      images: [...formData.images, ""],
    });
  };

  const removeImage = (index: number) => {
    setFormData((prevData) => ({
      ...prevData,
      images: prevData.images.filter((_, i) => i !== index),
    }));
  };

  const handleSubmit = async () => {
    try {
      const formattedFeatures = formData.features.reduce((acc, feature) => {
        acc[feature.label] = feature.value;
        return acc;
      }, {} as Record<string, any>);

      const updatedProduct = {
        ...formData,
        features: formattedFeatures,
      };

      let response;

      if (updatedProduct._id) {
        const { _id, ...productData } = updatedProduct;
        response = await fetch(`/api/products/id/${updatedProduct._id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(productData),
        });
      } else {
        const { _id, ...newProductData } = updatedProduct;
        response = await fetch("/api/products/id", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newProductData),
        });

        const responseData = await response.json();
        if (responseData.success) {
          updatedProduct._id = responseData._id;
        }
      }

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Ошибка при сохранении товара");
      }

      onSave(updatedProduct);
    } catch (error) {
      console.error("Ошибка при сохранении товара:", error);
      alert(`Ошибка при сохранении товара: ${error}`);
    }
  };

  const handleImageUpload = async (files: FileList | null) => {
    if (!files) return;

    const formDataImages = new FormData();
    Array.from(files).forEach((file) => {
      formDataImages.append("file", file);
    });

    try {
      const response = await fetch("/api/image-upload", {
        method: "POST",
        body: formDataImages,
      });
      const result = await response.json();

      if (response.ok) {
        setFormData((prevData) => ({
          ...prevData,
          images: [...prevData.images, ...result.filePaths],
        }));
      } else {
        alert(`Error: ${result.error}`);
      }
    } catch (error) {
      console.error("Error uploading files:", error);
      alert("An error occurred while uploading files.");
    }
  };

  return (
    <div className="mt-8">
      <h2 className="text-xl font-bold">
        {formData._id ? "Редактирование товара" : "Добавление товара"}
      </h2>
      <form className="space-y-4 mt-4 flex gap-5">
        {/* Выбор категории */}
        <div className="flex flex-col w-[550px] gap-3">
          <div className="flex flex-col gap-2">
            <label className="font-medium">Категория</label>
            <Popover open={openCategory} onOpenChange={setOpenCategory}>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  role="combobox"
                  aria-expanded={openCategory}
                  className="w-full justify-between"
                >
                  {formData.category_id
                    ? categories.find(
                        (category) => category._id === formData.category_id
                      )?.name_ru
                    : "Выберите категорию..."}
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[500px] p-0">
                <Command>
                  <CommandInput placeholder="Поиск категории..." />
                  <CommandEmpty>Категория не найдена.</CommandEmpty>
                  <CommandGroup>
                    {categories.map((category) => (
                      <CommandItem
                        key={category._id}
                        onSelect={() => {
                          setFormData({
                            ...formData,
                            category_id: category._id,
                          });
                          setOpenCategory(false);
                        }}
                      >
                        <Check
                          className={`mr-2 h-4 w-4 ${
                            formData.category_id === category._id
                              ? "opacity-100"
                              : "opacity-0"
                          }`}
                        />
                        {category.name_ru}
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>

          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="slug">Slug</Label>
            <Input
              type="text"
              id="slug"
              required
              placeholder="Slug"
              value={formData.slug}
              onChange={(e) =>
                setFormData({ ...formData, slug: e.target.value })
              }
            />
          </div>

          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="name">Название</Label>
            <Input
              type="text"
              required
              id="name"
              placeholder="Название"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
            />
          </div>

          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="price">Цена</Label>
            <Input
              type="number"
              id="price"
              placeholder="Цена"
              value={formData.price}
              onChange={(e) =>
                setFormData({ ...formData, price: Number(e.target.value) })
              }
            />
          </div>

          {/* Характеристики */}
          <div className="flex flex-col gap-2 ">
            <h3 className="font-bold">Характеристики</h3>
            {formData.features.map((feature, index) => (
              <div key={index} className="flex gap-2 items-center">
                {/* Поле для названия характеристики */}
                <input
                  type="text"
                  placeholder="Название характеристики"
                  value={feature.label}
                  onChange={(e) =>
                    handleFeatureChange(index, "label", e.target.value)
                  }
                  className="w-40 p-2 border rounded"
                />

                {/* Выбор типа характеристики */}
                <select
                  value={feature.type}
                  onChange={(e) =>
                    handleFeatureChange(index, "type", e.target.value)
                  }
                  className="w-32 p-2 border rounded"
                >
                  <option value="string">Строка</option>
                  <option value="int">Число</option>
                  <option value="bool">Лог</option>
                </select>

                {/* Поле для значения характеристики */}
                {feature.type === "bool" ? (
                  // Switch для логического типа
                  <Switch
                    checked={Boolean(feature.value)}
                    onCheckedChange={(checked) =>
                      handleFeatureChange(index, "value", checked)
                    }
                  />
                ) : (
                  // Обычное текстовое или числовое поле
                  <input
                    type={feature.type === "int" ? "number" : "text"}
                    placeholder="Значение"
                    value={feature.value}
                    onChange={(e) =>
                      handleFeatureChange(
                        index,
                        "value",
                        feature.type === "int"
                          ? Number(e.target.value)
                          : e.target.value
                      )
                    }
                    className="w-40 p-2 border rounded"
                  />
                )}

                {/* Кнопка удаления характеристики */}
                <button
                  type="button"
                  onClick={() => removeFeature(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  Удалить
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={addFeature}
              className="text-blue-500 hover:text-blue-700 mt-2"
            >
              + Добавить характеристику
            </button>
          </div>
          <div>
            <label htmlFor=""> Количество на складе </label>
            <input
              type="number"
              placeholder="Количество на складе"
              value={formData.stock_quantity}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  stock_quantity: Number(e.target.value),
                })
              }
              className="w-[55px] p-2 border rounded"
            />
          </div>

          {/* Скидка */}
          <div className="flex items-center gap-2 h-[25px]">
            <label className="flex items-center gap-2">
              <Switch
                checked={formData.isDiscount}
                onCheckedChange={(checked) =>
                  setFormData({ ...formData, isDiscount: checked })
                }
              />
              Скидка
            </label>
            {formData.isDiscount && (
              <input
                type="number"
                placeholder="Цена со скидкой"
                value={formData.discountedPrice}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    discountedPrice: Number(e.target.value),
                  })
                }
                className="w-[90px] p-2 border rounded"
              />
            )}
          </div>
          {/* Хит продаж */}
          <div className="flex items-center gap-2">
            <label className="flex items-center gap-2">
              <Switch
                checked={formData.isHotHit}
                onCheckedChange={(checked) =>
                  setFormData({ ...formData, isHotHit: checked })
                }
              />
              Хит продаж
            </label>
          </div>
        </div>
        <div className="flex flex-col w-[550px] gap-3">
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="short_description">Краткое описание</Label>
            <Textarea
              className="h-[70px]"
              id="short_description"
              placeholder="Краткое описание"
              value={formData.short_description}
              onChange={(e) =>
                setFormData({ ...formData, short_description: e.target.value })
              }
            />
          </div>
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="description">Полное описание</Label>
            <Textarea
              className="h-[120px]"
              id="description"
              placeholder="Полное описание"
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
            />
          </div>

          {/* Картинки
          <div>
            <h3 className="font-bold">Картинки</h3>
            {formData.images.map((image, index) => (
              <div key={index} className="flex gap-2 items-center">
                <input
                  type="text"
                  placeholder="Ссылка на картинку"
                  value={image}
                  onChange={(e) => handleImageChange(index, e.target.value)}
                  className="w-64 p-2 border rounded"
                />
                <button
                  type="button"
                  onClick={() => removeImage(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  Удалить
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={addImage}
              className="text-blue-500 hover:text-blue-700 mt-2"
            >
              + Добавить картинку
            </button>
          </div> */}

          {/* Изображения */}
          {/* Images */}
          <div>
            <Label>Изображения</Label>
            {formData.images.length > 0 && (
              <div className="grid grid-cols-3 gap-2">
                {formData.images.map((image, index) => (
                  <div key={index} className="relative">
                    <img
                      src={image}
                      alt={`Preview ${index}`}
                      className="w-full h-20 object-cover"
                    />
                    <Button
                      variant="ghost"
                      onClick={() => removeImage(index)}
                      className="absolute top-1 right-1 text-red-500"
                    >
                      ✕
                    </Button>
                  </div>
                ))}
              </div>
            )}
            <form
              onSubmit={(e) => e.preventDefault()} // Prevent page reload
              encType="multipart/form-data"
            >
              <input
                type="file"
                multiple
                onChange={(e) => handleImageUpload(e.target.files)}
                className="w-full p-2 border rounded"
              />
            </form>
          </div>

          {/* Кнопки управления */}
          <div className="flex justify-end gap-4 mt-4">
            <Button variant="outline" onClick={onCancel}>
              Отмена
            </Button>
            <Button onClick={handleSubmit}>Сохранить</Button>
          </div>
        </div>
      </form>
    </div>
  );
};


"use client";
import React, { useState } from "react";

interface ImageUploadFormProps {
  onImagesUploaded: (images: string[]) => void;
}

const ImageUploadForm: React.FC<ImageUploadFormProps> = ({
  onImagesUploaded,
}) => {
  const [files, setFiles] = useState<FileList | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFiles(e.target.files);
  };

  return (
    <div>
      <label className="block">Select Images:</label>
      <input
        type="file"
        multiple
        onChange={handleFileChange}
        className="w-full p-2 border rounded"
      />
    </div>
  );
};

export default ImageUploadForm;

